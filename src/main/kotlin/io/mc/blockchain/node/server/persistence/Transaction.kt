package io.mc.blockchain.node.server.persistence

import com.fasterxml.jackson.databind.ObjectMapper
import kotlin.reflect.KClass

data class Transaction(
        /**
         * Unique identifier which can be generated by hashing text, senderHash, signature and timestamp
         */
        var id: String? = null,
        /**
         * Comment of this transaction
         */
        var text: String? = null,
        /**
         * The hash of the address which is responsible for this Transaction
         */
        var senderId: String? = null,
        var inputs: List<TxInput>? = null,
        var outputs: List<TxOutput>? = null,
        var timestamp: Long? = System.currentTimeMillis(),
        var senderSignature: String? = null) {

    override fun equals(o: Any?) = this === o || o is Transaction && id == o.id
    override fun hashCode() = id!!.hashCode()
}

data class TxInput(val value: Long, val type: String, val txId: String, val index: Int, val proofSignature: String)
data class TxOutput(val value: Long, val type: String, val receiverId: String, val index: Int)

fun Any.toJsonString(): String {
    return ObjectMapper().writeValueAsString(this)
}

fun <T : Any> String.parseJson(type: KClass<T>): T {
    return ObjectMapper().readValue(this, type.java)
}