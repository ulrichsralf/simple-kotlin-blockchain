package io.mc.blockchain.node.server.persistence


import com.fasterxml.jackson.databind.ObjectMapper
import org.springframework.data.cassandra.mapping.PrimaryKey
import org.springframework.data.cassandra.mapping.Table
import kotlin.reflect.KClass

@Table("transaction")
data class Transaction(
        /**
         * Unique identifier which can be generated by hashing text, senderHash, signature and timestamp
         */
        @PrimaryKey
        var id: String? = null,
        /**
         * Comment of this transaction
         */
        var text: String? = null,
        /**
         * The hash of the address which is responsible for this Transaction
         */
        var senderId: String? = null,
        /**
         * List of inputs
         */
        var inputs: List<String>? = null,
        /**
         * List of outputs
         */
        var outputs: List<String>? = null,
        /**
         * Creation time of this Transaction
         */
        var timestamp: Long? = System.currentTimeMillis(),

        /**
         * Signature of text which can be verified with publicKey of sender address
         */
        var signature: String? = null) {


    override fun equals(o: Any?) = this === o || o is Transaction && id == o.id
    override fun hashCode() = id!!.hashCode()

}

data class TxInput(val value: Long,val type: String, val senderId: String, val signature: String)
data class TxOutput(val value: Long, val type: String, val recipientId: String)

fun Any.toJsonString():String{
    return ObjectMapper().writeValueAsString(this)
}
fun <T : Any> String.parseJson(type: KClass<T>): T{
    return ObjectMapper().readValue(this,type.java)
}